{"version":3,"file":"capacitor.js","sources":["../build/legacy/legacy-web-plugin-merge.js","../build/logger.js","../build/util.js","../build/bridge.js","../build/runtime.js","../build/events.js","../build/vendor.js","../build/legacy/legacy-handlers.js","../build/global.js","../build/core-plugins.js","../build/web-plugin.js"],"sourcesContent":["export const legacyRegisterWebPlugin = (cap, webPlugin) => {\n    var _a;\n    const config = webPlugin.config;\n    const Plugins = cap.Plugins;\n    if (!config || !config.name) {\n        // TODO: add link to upgrade guide\n        throw new Error(`Capacitor WebPlugin is using the deprecated \"registerWebPlugin()\" function, but without the config. Please use \"registerPlugin()\" instead to register this web plugin.\"`);\n    }\n    // TODO: add link to upgrade guide\n    console.warn(`Capacitor plugin \"${config.name}\" is using the deprecated \"registerWebPlugin()\" function`);\n    if (!Plugins[config.name] || ((_a = config === null || config === void 0 ? void 0 : config.platforms) === null || _a === void 0 ? void 0 : _a.includes(cap.getPlatform()))) {\n        // Add the web plugin into the plugins registry if there already isn't\n        // an existing one. If it doesn't already exist, that means\n        // there's no existing native implementation for it.\n        // - OR -\n        // If we already have a plugin registered (meaning it was defined in the native layer),\n        // then we should only overwrite it if the corresponding web plugin activates on\n        // a certain platform. For example: Geolocation uses the WebPlugin on Android but not iOS\n        Plugins[config.name] = webPlugin;\n    }\n};\n//# sourceMappingURL=legacy-web-plugin-merge.js.map","const BRIDGED_CONSOLE_METHODS = [\n    'debug',\n    'error',\n    'info',\n    'log',\n    'trace',\n    'warn',\n];\nexport const initLogger = (win, cap) => {\n    // patch window.console on iOS and store original console fns\n    const isIos = cap.getPlatform() === 'ios';\n    const originalConsole = Object.assign({}, win.console);\n    if (win.console && isIos) {\n        for (const logfn of BRIDGED_CONSOLE_METHODS) {\n            win.console[logfn] = (...args) => {\n                const msgs = [...args];\n                originalConsole[logfn](...msgs);\n                try {\n                    cap.toNative('Console', 'log', {\n                        level: logfn,\n                        message: msgs.map(serializeConsoleMessage).join(' '),\n                    });\n                }\n                catch (e) {\n                    // error converting/posting console messages\n                    originalConsole.error(e);\n                }\n            };\n        }\n    }\n    cap.logToNative = createLogToNative(win.console);\n    cap.logFromNative = createLogFromNative(win.console);\n};\nconst serializeConsoleMessage = (msg) => {\n    if (typeof msg === 'object') {\n        try {\n            msg = JSON.stringify(msg);\n        }\n        catch (e) {\n            // ignore\n        }\n    }\n    return String(msg);\n};\nconst isFullConsole = (c) => {\n    if (!c) {\n        return false;\n    }\n    return (typeof c.groupCollapsed === 'function' ||\n        typeof c.groupEnd === 'function' ||\n        typeof c.dir === 'function');\n};\nconst createLogToNative = (c) => (call) => {\n    if (isFullConsole(c)) {\n        c.groupCollapsed('%cnative %c' +\n            call.pluginId +\n            '.' +\n            call.methodName +\n            ' (#' +\n            call.callbackId +\n            ')', 'font-weight: lighter; color: gray', 'font-weight: bold; color: #000');\n        c.dir(call);\n        c.groupEnd();\n    }\n    else {\n        c.log('LOG TO NATIVE: ', call);\n    }\n};\nconst createLogFromNative = (c) => (result) => {\n    if (isFullConsole(c)) {\n        const success = result.success === true;\n        const tagStyles = success\n            ? 'font-style: italic; font-weight: lighter; color: gray'\n            : 'font-style: italic; font-weight: lighter; color: red';\n        c.groupCollapsed('%cresult %c' +\n            result.pluginId +\n            '.' +\n            result.methodName +\n            ' (#' +\n            result.callbackId +\n            ')', tagStyles, 'font-style: italic; font-weight: bold; color: #444');\n        if (result.success === false) {\n            c.error(result.error);\n        }\n        else {\n            c.dir(result.data);\n        }\n        c.groupEnd();\n    }\n    else {\n        if (result.success === false) {\n            c.error('LOG FROM NATIVE', result.error);\n        }\n        else {\n            c.log('LOG FROM NATIVE', result.data);\n        }\n    }\n};\n//# sourceMappingURL=logger.js.map","export const convertFileSrcServerUrl = (webviewServerUrl, filePath) => {\n    if (typeof filePath === 'string') {\n        if (filePath.startsWith('/')) {\n            return webviewServerUrl + '/_capacitor_file_' + filePath;\n        }\n        if (filePath.startsWith('file://')) {\n            return (webviewServerUrl + filePath.replace('file://', '/_capacitor_file_'));\n        }\n        if (filePath.startsWith('content://')) {\n            return (webviewServerUrl + filePath.replace('content:/', '/_capacitor_content_'));\n        }\n    }\n    return filePath;\n};\nexport var ExceptionCode;\n(function (ExceptionCode) {\n    /**\n     * API is not implemented.\n     *\n     * This usually means the API can't be used because it is not implemented for\n     * the current platform.\n     */\n    ExceptionCode[\"Unimplemented\"] = \"UNIMPLEMENTED\";\n    /**\n     * API is not available.\n     *\n     * This means the API can't be used right now because:\n     *   - it is currently missing a prerequisite, such as network connectivity\n     *   - it requires a particular platform or browser version\n     */\n    ExceptionCode[\"Unavailable\"] = \"UNAVAILABLE\";\n})(ExceptionCode || (ExceptionCode = {}));\nexport class CapacitorException extends Error {\n    constructor(message, code) {\n        super(message);\n        this.message = message;\n        this.code = code;\n    }\n}\n//# sourceMappingURL=util.js.map","import { initLogger } from './logger';\nimport { CapacitorException, ExceptionCode } from './util';\nexport const initBridge = (win, cap) => {\n    var _a, _b;\n    // keep a collection of callbacks for native response data\n    const callbacks = new Map();\n    // Counter of callback ids, randomized to avoid\n    // any issues during reloads if a call comes back with\n    // an existing callback id from an old session\n    let callbackIdCount = Math.floor(Math.random() * 134217728);\n    let postToNative = null;\n    // create the postToNative() fn if needed\n    if (win.androidBridge) {\n        // android platform\n        postToNative = (data) => {\n            var _a;\n            try {\n                win.androidBridge.postMessage(JSON.stringify(data));\n            }\n            catch (e) {\n                (_a = win === null || win === void 0 ? void 0 : win.console) === null || _a === void 0 ? void 0 : _a.error(e);\n            }\n        };\n    }\n    else if ((_b = (_a = win.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.bridge) {\n        // ios platform\n        postToNative = (data) => {\n            var _a;\n            try {\n                data.type = 'message';\n                win.webkit.messageHandlers.bridge.postMessage(data);\n            }\n            catch (e) {\n                (_a = win === null || win === void 0 ? void 0 : win.console) === null || _a === void 0 ? void 0 : _a.error(e);\n            }\n        };\n    }\n    cap.handleWindowError = (msg, url, lineNo, columnNo, err) => {\n        const str = msg.toLowerCase();\n        if (str.indexOf('script error') > -1) {\n            // Some IE issue?\n        }\n        else {\n            const errObj = {\n                type: 'js.error',\n                error: {\n                    message: msg,\n                    url: url,\n                    line: lineNo,\n                    col: columnNo,\n                    errorObject: JSON.stringify(err),\n                },\n            };\n            if (err !== null) {\n                cap.handleError(err);\n            }\n            if (postToNative) {\n                postToNative(errObj);\n            }\n        }\n        return false;\n    };\n    if (cap.DEBUG) {\n        window.onerror = cap.handleWindowError;\n    }\n    initLogger(win, cap);\n    /**\n     * Send a plugin method call to the native layer\n     */\n    cap.toNative = (pluginName, methodName, options, storedCallback) => {\n        var _a, _b;\n        try {\n            if (typeof postToNative === 'function') {\n                let callbackId = '-1';\n                if (storedCallback &&\n                    (typeof storedCallback.callback === 'function' ||\n                        typeof storedCallback.resolve === 'function')) {\n                    // store the call for later lookup\n                    callbackId = String(++callbackIdCount);\n                    callbacks.set(callbackId, storedCallback);\n                }\n                const callData = {\n                    callbackId: callbackId,\n                    pluginId: pluginName,\n                    methodName: methodName,\n                    options: options || {},\n                };\n                if (cap.DEBUG && pluginName !== 'Console') {\n                    cap.logToNative(callData);\n                }\n                // post the call data to native\n                postToNative(callData);\n                return callbackId;\n            }\n            else {\n                (_a = win === null || win === void 0 ? void 0 : win.console) === null || _a === void 0 ? void 0 : _a.warn(`implementation unavailable for: ${pluginName}`);\n            }\n        }\n        catch (e) {\n            (_b = win === null || win === void 0 ? void 0 : win.console) === null || _b === void 0 ? void 0 : _b.error(e);\n        }\n        return null;\n    };\n    /**\n     * Process a response from the native layer.\n     */\n    cap.fromNative = (result) => {\n        var _a, _b;\n        if (cap.DEBUG && result.pluginId !== 'Console') {\n            cap.logFromNative(result);\n        }\n        // get the stored call, if it exists\n        try {\n            const storedCall = callbacks.get(result.callbackId);\n            if (storedCall) {\n                // looks like we've got a stored call\n                if (result.error) {\n                    // ensure stacktraces by copying error properties to an Error\n                    result.error = Object.keys(result.error).reduce((err, key) => {\n                        err[key] = result.error[key];\n                        return err;\n                    }, new cap.Exception(''));\n                }\n                if (typeof storedCall.callback === 'function') {\n                    // callback\n                    if (result.success) {\n                        storedCall.callback(result.data);\n                    }\n                    else {\n                        storedCall.callback(null, result.error);\n                    }\n                }\n                else if (typeof storedCall.resolve === 'function') {\n                    // promise\n                    if (result.success) {\n                        storedCall.resolve(result.data);\n                    }\n                    else {\n                        storedCall.reject(result.error);\n                    }\n                    // no need to keep this stored callback\n                    // around for a one time resolve promise\n                    callbacks.delete(result.callbackId);\n                }\n            }\n            else if (!result.success && result.error) {\n                // no stored callback, but if there was an error let's log it\n                (_a = win === null || win === void 0 ? void 0 : win.console) === null || _a === void 0 ? void 0 : _a.warn(result.error);\n            }\n            if (result.save === false) {\n                callbacks.delete(result.callbackId);\n            }\n        }\n        catch (e) {\n            (_b = win === null || win === void 0 ? void 0 : win.console) === null || _b === void 0 ? void 0 : _b.error(e);\n        }\n        // always delete to prevent memory leaks\n        // overkill but we're not sure what apps will do with this data\n        delete result.data;\n        delete result.error;\n    };\n    if (typeof postToNative === 'function') {\n        // toNative bridge found\n        cap.nativeCallback = (pluginName, methodName, options, callback) => {\n            if (typeof options === 'function') {\n                callback = options;\n                options = null;\n            }\n            return cap.toNative(pluginName, methodName, options, {\n                callback: callback,\n            });\n        };\n        cap.nativePromise = (pluginName, methodName, options) => {\n            return new Promise((resolve, reject) => {\n                cap.toNative(pluginName, methodName, options, {\n                    resolve: resolve,\n                    reject: reject,\n                });\n            });\n        };\n    }\n    else {\n        // no native bridge created\n        cap.nativeCallback = () => {\n            throw new CapacitorException(`nativeCallback() not implemented`, ExceptionCode.Unimplemented);\n        };\n        cap.nativePromise = () => Promise.reject(new CapacitorException(`nativePromise() not implemented`, ExceptionCode.Unimplemented));\n    }\n};\nexport const getPlatformId = (win) => {\n    var _a, _b;\n    if (win.androidBridge) {\n        return 'android';\n    }\n    if ((_b = (_a = win.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.bridge) {\n        return 'ios';\n    }\n    return 'web';\n};\n//# sourceMappingURL=bridge.js.map","import { getPlatformId, initBridge } from './bridge';\nimport { initEvents } from './events';\nimport { initLegacyHandlers } from './legacy/legacy-handlers';\nimport { CapacitorException, convertFileSrcServerUrl, ExceptionCode, } from './util';\nimport { initVendor } from './vendor';\nexport const createCapacitor = (win) => {\n    const cap = win.Capacitor || {};\n    const Plugins = (cap.Plugins = cap.Plugins || {});\n    const webviewServerUrl = typeof win.WEBVIEW_SERVER_URL === 'string' ? win.WEBVIEW_SERVER_URL : '';\n    const getPlatform = () => getPlatformId(win);\n    const isNativePlatform = () => getPlatformId(win) !== 'web';\n    const isPluginAvailable = (pluginName) => Object.prototype.hasOwnProperty.call(Plugins, pluginName);\n    const convertFileSrc = (filePath) => convertFileSrcServerUrl(webviewServerUrl, filePath);\n    const logJs = (msg, level) => {\n        switch (level) {\n            case 'error':\n                win.console.error(msg);\n                break;\n            case 'warn':\n                win.console.warn(msg);\n                break;\n            case 'info':\n                win.console.info(msg);\n                break;\n            default:\n                win.console.log(msg);\n        }\n    };\n    const handleError = (err) => win.console.error(err);\n    const pluginMethodNoop = (_target, prop, pluginName) => {\n        return Promise.reject(`${pluginName} does not have an implementation of \"${prop}\".`);\n    };\n    // ensure we do not double proxy the same plugin\n    const registeredPlugins = new Map();\n    const registerPlugin = (pluginName, impls = {}) => {\n        const registeredPlugin = registeredPlugins.get(pluginName);\n        if (registeredPlugin) {\n            return registeredPlugin;\n        }\n        const nativePluginImpl = Plugins[pluginName];\n        if (nativePluginImpl) {\n            // the native implementation is already on the global\n            // return a proxy that'll also handle any missing methods\n            // convert the Capacitor.Plugins.PLUGIN into a proxy and return it\n            const nativePluginProxy = (Plugins[pluginName] = new Proxy({}, {\n                get(_, prop) {\n                    const func = Reflect.get(nativePluginImpl, prop);\n                    if (typeof func === 'function') {\n                        // call the plugin method, Plugin.method(args)\n                        // platform implementation already ready to go\n                        return func;\n                    }\n                    // https://github.com/facebook/react/issues/20030\n                    if (prop === '$$typeof') {\n                        return undefined;\n                    }\n                    throw new CapacitorException(`\"${pluginName}.${prop}()\" is not implemented on ${getPlatform()}`, ExceptionCode.Unimplemented);\n                },\n            }));\n            registeredPlugins.set(pluginName, nativePluginProxy);\n            return nativePluginProxy;\n        }\n        let loadedImpl = null;\n        let lazyLoadingImpl = null;\n        // there isn't a native implementation already on the global\n        // create a Proxy which is used to lazy load implementations\n        const pluginProxy = (Plugins[pluginName] = new Proxy({}, {\n            get(_, prop) {\n                // proxy getter for any call on this plugin object\n                const platform = getPlatform();\n                const pltImplementation = impls[platform];\n                if (pltImplementation) {\n                    // this platform has an implementation we can use\n                    if (!loadedImpl && !lazyLoadingImpl) {\n                        // haven't loaded the implementation yet\n                        if (typeof pltImplementation === 'function') {\n                            // fn provided to load the implementation\n                            const loaderRtn = pltImplementation();\n                            if (loaderRtn) {\n                                // received an object from the implementation loader fn\n                                if (typeof loaderRtn.then === 'function') {\n                                    // returned a promise to lazy load the implementation\n                                    lazyLoadingImpl = loaderRtn;\n                                }\n                                else {\n                                    // return the data we need\n                                    loadedImpl = loaderRtn;\n                                }\n                            }\n                        }\n                        else {\n                            // given the exact value already\n                            loadedImpl = pltImplementation;\n                        }\n                    }\n                    if (loadedImpl) {\n                        // implementation loaded and has the methd to call ready\n                        const func = Reflect.get(loadedImpl, prop);\n                        if (typeof func === 'function') {\n                            return (...args) => Reflect.apply(func, loadedImpl, args);\n                        }\n                        throw new CapacitorException(`\"${pluginName}.${prop}()\" is not implemented on ${platform}`, ExceptionCode.Unimplemented);\n                    }\n                    if (lazyLoadingImpl) {\n                        // actively lazy loading the implementation\n                        if (prop === 'addListener') {\n                            // Plugin.addListener()\n                            // returns an object with a remove() fn\n                            return (...args) => {\n                                // doing some lazy loading trickery so we can return\n                                // an object, yet still lazy load the implementation\n                                let loadedRtn = null;\n                                lazyLoadingImpl.then(lazyLoadedImpl => {\n                                    loadedImpl = lazyLoadedImpl;\n                                    const func = Reflect.get(loadedImpl, prop);\n                                    loadedRtn = Reflect.apply(func, loadedImpl, args);\n                                });\n                                return {\n                                    remove: () => {\n                                        lazyLoadingImpl.then(lazyLoadedImpl => {\n                                            loadedImpl = lazyLoadedImpl;\n                                            if (loadedRtn) {\n                                                loadedRtn.remove();\n                                            }\n                                        });\n                                    },\n                                };\n                            };\n                        }\n                        if (prop === 'removeAllListeners') {\n                            // Plugin.removeAllListeners()\n                            // returns void, not a promise\n                            return () => {\n                                lazyLoadingImpl.then(lazyLoadedImpl => {\n                                    loadedImpl = lazyLoadedImpl;\n                                    const func = Reflect.get(loadedImpl, prop);\n                                    return Reflect.apply(func, loadedImpl, []);\n                                });\n                            };\n                        }\n                        return (...args) => {\n                            return lazyLoadingImpl.then(lazyLoadedImpl => {\n                                // implementation is now loaded and has the methd to call ready\n                                loadedImpl = lazyLoadedImpl;\n                                const func = Reflect.get(loadedImpl, prop);\n                                if (typeof func === 'function') {\n                                    return Reflect.apply(func, loadedImpl, args);\n                                }\n                                throw new CapacitorException(`\"${pluginName}.${prop}()\" is not implemented on ${platform}`, ExceptionCode.Unimplemented);\n                            });\n                        };\n                    }\n                }\n                throw new CapacitorException(`\"${pluginName}\" plugin is not implemented on ${platform}`, ExceptionCode.Unimplemented);\n            },\n        }));\n        registeredPlugins.set(pluginName, pluginProxy);\n        return pluginProxy;\n    };\n    // convert all the existing plugins on the global Capacitor.Plugins\n    // object into proxies automatically\n    Object.keys(Plugins).forEach(pluginName => registerPlugin(pluginName));\n    cap.convertFileSrc = convertFileSrc;\n    cap.getPlatform = getPlatform;\n    cap.getServerUrl = () => webviewServerUrl;\n    cap.handleError = handleError;\n    cap.isNativePlatform = isNativePlatform;\n    cap.isPluginAvailable = isPluginAvailable;\n    cap.logJs = logJs;\n    cap.pluginMethodNoop = pluginMethodNoop;\n    cap.registerPlugin = registerPlugin;\n    cap.Exception = CapacitorException;\n    cap.DEBUG = !!cap.DEBUG;\n    initBridge(win, cap);\n    initEvents(win, cap);\n    initVendor(win, cap);\n    initLegacyHandlers(win, cap);\n    return cap;\n};\nexport const initCapacitorGlobal = (win) => (win.Capacitor = createCapacitor(win));\n//# sourceMappingURL=runtime.js.map","export const initEvents = (win, cap) => {\n    const doc = win.document;\n    const cordova = win.cordova;\n    cap.addListener = (pluginName, eventName, callback) => {\n        const callbackId = cap.nativeCallback(pluginName, 'addListener', {\n            eventName: eventName,\n        }, callback);\n        return {\n            remove: () => {\n                var _a;\n                (_a = win === null || win === void 0 ? void 0 : win.console) === null || _a === void 0 ? void 0 : _a.debug('Removing listener', pluginName, eventName);\n                cap.removeListener(pluginName, callbackId, eventName, callback);\n            },\n        };\n    };\n    cap.removeListener = (pluginName, callbackId, eventName, callback) => {\n        cap.nativeCallback(pluginName, 'removeListener', {\n            callbackId: callbackId,\n            eventName: eventName,\n        }, callback);\n    };\n    cap.createEvent = (eventName, eventData) => {\n        if (doc) {\n            const ev = doc.createEvent('Events');\n            ev.initEvent(eventName, false, false);\n            if (eventData && typeof eventData === 'object') {\n                for (const i in eventData) {\n                    // eslint-disable-next-line no-prototype-builtins\n                    if (eventData.hasOwnProperty(i)) {\n                        ev[i] = eventData[i];\n                    }\n                }\n            }\n            return ev;\n        }\n        return null;\n    };\n    cap.triggerEvent = (eventName, target, eventData) => {\n        eventData = eventData || {};\n        const ev = cap.createEvent(eventName, eventData);\n        if (ev) {\n            if (target === 'document') {\n                if (cordova === null || cordova === void 0 ? void 0 : cordova.fireDocumentEvent) {\n                    cordova.fireDocumentEvent(eventName, eventData);\n                    return true;\n                }\n                else if (doc === null || doc === void 0 ? void 0 : doc.dispatchEvent) {\n                    return doc.dispatchEvent(ev);\n                }\n            }\n            else if (target === 'window' && win.dispatchEvent) {\n                return win.dispatchEvent(ev);\n            }\n            else if (doc === null || doc === void 0 ? void 0 : doc.querySelector) {\n                const targetEl = doc.querySelector(target);\n                if (targetEl) {\n                    return targetEl.dispatchEvent(ev);\n                }\n            }\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=events.js.map","export const initVendor = (win, cap) => {\n    const Ionic = (win.Ionic = win.Ionic || {});\n    const IonicWebView = (Ionic.WebView = Ionic.WebView || {});\n    const Plugins = cap.Plugins;\n    IonicWebView.getServerBasePath = (callback) => {\n        var _a;\n        (_a = Plugins === null || Plugins === void 0 ? void 0 : Plugins.WebView) === null || _a === void 0 ? void 0 : _a.getServerBasePath().then(result => {\n            callback(result.path);\n        });\n    };\n    IonicWebView.setServerBasePath = (path) => {\n        var _a;\n        (_a = Plugins === null || Plugins === void 0 ? void 0 : Plugins.WebView) === null || _a === void 0 ? void 0 : _a.setServerBasePath({ path });\n    };\n    IonicWebView.persistServerBasePath = () => {\n        var _a;\n        (_a = Plugins === null || Plugins === void 0 ? void 0 : Plugins.WebView) === null || _a === void 0 ? void 0 : _a.persistServerBasePath();\n    };\n    IonicWebView.convertFileSrc = (url) => cap.convertFileSrc(url);\n};\n//# sourceMappingURL=vendor.js.map","export const initLegacyHandlers = (win, cap) => {\n    // define cordova if it's not there already\n    win.cordova = win.cordova || {};\n    const doc = win.document;\n    const nav = win.navigator;\n    if (nav) {\n        nav.app = nav.app || {};\n        nav.app.exitApp = () => {\n            cap.nativeCallback('App', 'exitApp', {});\n        };\n    }\n    if (doc) {\n        const docAddEventListener = doc.addEventListener;\n        doc.addEventListener = (...args) => {\n            const eventName = args[0];\n            const handler = args[1];\n            if (eventName === 'deviceready' && handler) {\n                Promise.resolve().then(handler);\n            }\n            else if (eventName === 'backbutton' && cap.Plugins.App) {\n                // Add a dummy listener so Capacitor doesn't do the default\n                // back button action\n                cap.Plugins.App.addListener('backButton', () => {\n                    /**/\n                });\n            }\n            return docAddEventListener.apply(doc, args);\n        };\n    }\n    // deprecated in v3, remove from v4\n    cap.platform = cap.getPlatform();\n    cap.isNative = cap.isNativePlatform();\n};\n//# sourceMappingURL=legacy-handlers.js.map","import { legacyRegisterWebPlugin } from './legacy/legacy-web-plugin-merge';\nimport { initCapacitorGlobal } from './runtime';\nexport const Capacitor = /*#__PURE__*/ initCapacitorGlobal((typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n        ? self\n        : typeof window !== 'undefined'\n            ? window\n            : typeof global !== 'undefined'\n                ? global\n                : {}));\nexport const registerPlugin = Capacitor.registerPlugin;\n/**\n * @deprecated Provided for backwards compatibility for Capacitor v2 plugins.\n * Capacitor v3 plugins should import the plugin directly. This \"Plugins\"\n * export is deprecated in v3, and will be removed in v4.\n */\nexport const Plugins = Capacitor.Plugins;\n/**\n * Provided for backwards compatibility. Use the registerPlugin() API\n * instead, and provide the web plugin as the \"web\" implmenetation.\n * For example\n *\n * export const Example = registerPlugin('Example', {\n *   web: () => import('./web').then(m => new m.Example())\n * })\n *\n * @deprecated Deprecated in v3, will be removed from v4.\n */\nexport const registerWebPlugin = (plugin) => legacyRegisterWebPlugin(Capacitor, plugin);\n//# sourceMappingURL=global.js.map","import { registerPlugin } from './global';\nexport const WebView = /*#__PURE__*/ registerPlugin('WebView');\n//# sourceMappingURL=core-plugins.js.map","import { Capacitor } from './global';\nimport { ExceptionCode } from './util';\n/**\n * Base class web plugins should extend.\n */\nexport class WebPlugin {\n    constructor(config) {\n        this.loaded = false;\n        this.listeners = {};\n        this.windowListeners = {};\n        if (config) {\n            // TODO: add link to upgrade guide\n            console.warn(`Capacitor WebPlugin \"${config.name}\" config object was deprecated in v3 and will be removed in v4.`);\n            this.config = config;\n        }\n    }\n    unimplemented(msg = 'not implemented') {\n        return new Capacitor.Exception(msg, ExceptionCode.Unimplemented);\n    }\n    unavailable(msg = 'not available') {\n        return new Capacitor.Exception(msg, ExceptionCode.Unavailable);\n    }\n    addWindowListener(handle) {\n        window.addEventListener(handle.windowEventName, handle.handler);\n        handle.registered = true;\n    }\n    removeWindowListener(handle) {\n        if (!handle) {\n            return;\n        }\n        window.removeEventListener(handle.windowEventName, handle.handler);\n        handle.registered = false;\n    }\n    addListener(eventName, listenerFunc) {\n        const listeners = this.listeners[eventName];\n        if (!listeners) {\n            this.listeners[eventName] = [];\n        }\n        this.listeners[eventName].push(listenerFunc);\n        // If we haven't added a window listener for this event and it requires one,\n        // go ahead and add it\n        const windowListener = this.windowListeners[eventName];\n        if (windowListener && !windowListener.registered) {\n            this.addWindowListener(windowListener);\n        }\n        return {\n            remove: () => {\n                this.removeListener(eventName, listenerFunc);\n            },\n        };\n    }\n    removeListener(eventName, listenerFunc) {\n        const listeners = this.listeners[eventName];\n        if (!listeners) {\n            return;\n        }\n        const index = listeners.indexOf(listenerFunc);\n        this.listeners[eventName].splice(index, 1);\n        // If there are no more listeners for this type of event,\n        // remove the window listener\n        if (!this.listeners[eventName].length) {\n            this.removeWindowListener(this.windowListeners[eventName]);\n        }\n    }\n    removeAllListeners() {\n        this.listeners = {};\n        for (const listener in this.windowListeners) {\n            this.removeWindowListener(this.windowListeners[listener]);\n        }\n        this.windowListeners = {};\n    }\n    notifyListeners(eventName, data) {\n        const listeners = this.listeners[eventName];\n        if (listeners) {\n            listeners.forEach(listener => listener(data));\n        }\n    }\n    hasListeners(eventName) {\n        return !!this.listeners[eventName].length;\n    }\n    registerWindowListener(windowEventName, pluginEventName) {\n        this.windowListeners[pluginEventName] = {\n            registered: false,\n            windowEventName,\n            pluginEventName,\n            handler: event => {\n                this.notifyListeners(pluginEventName, event);\n            },\n        };\n    }\n    load() {\n        this.loaded = true;\n    }\n}\n//# sourceMappingURL=web-plugin.js.map"],"names":["BRIDGED_CONSOLE_METHODS","serializeConsoleMessage","msg","JSON","stringify","e","String","isFullConsole","c","groupCollapsed","groupEnd","dir","createLogToNative","call","pluginId","methodName","callbackId","log","createLogFromNative","result","tagStyles","success","error","data","ExceptionCode","CapacitorException","Error","[object Object]","message","code","super","this","initBridge","win","cap","_a","_b","callbacks","Map","callbackIdCount","Math","floor","random","postToNative","androidBridge","postMessage","console","webkit","messageHandlers","bridge","type","handleWindowError","url","lineNo","columnNo","err","toLowerCase","indexOf","errObj","line","col","errorObject","handleError","DEBUG","window","onerror","isIos","getPlatform","originalConsole","Object","assign","logfn","args","msgs","toNative","level","map","join","logToNative","logFromNative","initLogger","pluginName","options","storedCallback","callback","resolve","set","callData","warn","fromNative","storedCall","get","keys","reduce","key","Exception","reject","delete","save","nativeCallback","nativePromise","Promise","Unimplemented","getPlatformId","createCapacitor","Capacitor","Plugins","webviewServerUrl","WEBVIEW_SERVER_URL","registeredPlugins","registerPlugin","impls","registeredPlugin","nativePluginImpl","nativePluginProxy","Proxy","_","prop","func","Reflect","loadedImpl","lazyLoadingImpl","pluginProxy","platform","pltImplementation","loaderRtn","then","apply","loadedRtn","lazyLoadedImpl","remove","forEach","convertFileSrc","filePath","startsWith","replace","convertFileSrcServerUrl","getServerUrl","isNativePlatform","isPluginAvailable","prototype","hasOwnProperty","logJs","info","pluginMethodNoop","_target","doc","document","cordova","addListener","eventName","debug","removeListener","createEvent","eventData","ev","initEvent","i","triggerEvent","target","fireDocumentEvent","dispatchEvent","querySelector","targetEl","initEvents","Ionic","IonicWebView","WebView","getServerBasePath","path","setServerBasePath","persistServerBasePath","initVendor","nav","navigator","app","exitApp","docAddEventListener","addEventListener","handler","App","isNative","initLegacyHandlers","initCapacitorGlobal","globalThis","self","global","config","loaded","listeners","windowListeners","name","Unavailable","handle","windowEventName","registered","removeEventListener","listenerFunc","push","windowListener","addWindowListener","index","splice","length","removeWindowListener","listener","pluginEventName","event","notifyListeners","plugin","webPlugin","platforms","includes","legacyRegisterWebPlugin"],"mappings":"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"}